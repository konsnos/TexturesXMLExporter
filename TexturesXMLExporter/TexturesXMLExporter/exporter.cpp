/*
* <author>Konstantinos Egkarchos</author>
* <contact>konsnosl@gmail.com</contact>
*/

#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <fstream>
#include <vector>
#include <iomanip>

#include "exporter.h"
#include "Statics.h"
#include "folder.h"

#include "boost\filesystem\path.hpp"
#include "boost\filesystem\operations.hpp"

#include <direct.h>
#include <time.h>

#include <exception>


using namespace std;
using namespace boost::filesystem;

unsigned long exporter::fileImg_count = 0;
unsigned long exporter::fileOther_count = 0;
unsigned long exporter::fileDif_count = 0;
unsigned long exporter::fileBmp_count = 0;
unsigned long exporter::fileNormal_count = 0;
unsigned long exporter::fileGloss_count = 0;
unsigned long exporter::fileHeight_count = 0;
unsigned long exporter::fileSpec_count = 0;
unsigned long exporter::fileRough_count = 0;
unsigned long exporter::fileMetal_count = 0;
unsigned long exporter::fileUnkn_count = 0;
unsigned long exporter::dir_count = 0;
unsigned long exporter::other_count = 0;
unsigned long exporter::err_count = 0;

int exporter::indents = 0;

/** Initializer variables and save to file the generated xml. */
exporter::exporter()
{
	fileImg_count = 0;
	fileOther_count = 0;
	fileDif_count = 0;
	fileBmp_count = 0;
	fileNormal_count = 0;
	fileGloss_count = 0;
	fileHeight_count = 0;
	fileSpec_count = 0;
	fileRough_count = 0;
	fileMetal_count = 0;
	fileUnkn_count = 0;
	dir_count = 0;
	other_count = 0;
	err_count = 0;

	initializeStartingDir();
	initializeThumbnailsPath();

	ofstream myfile;
	myfile.open("textures.xml");

	generateTreeOrder();

	cout << "Generating thumbnails..." << endl;
	generateThumbs();

	cout << "Generating textures.xml..." << endl;
	myfile << generate_xml();

	myfile.close();
}

void exporter::initializeStartingDir()
{
	if (statics::startingPath == "") // no path. Generate current.
	{
		if ((statics::startingPath = _getcwd(NULL, 0)) == NULL)
		{
			cout << "Error: Could not retrieve current path. Exitting..." << endl;
			exit(1);
		}
	}

	cout << "Root path is\n" << statics::startingPath << endl << endl;
	rootPath = new path(statics::startingPath);

	if (!is_directory(*rootPath))
	{
		cout << "Error: Current path is not a directory. Exitting..." << endl;
		exit(1);
	}
}

void exporter::initializeThumbnailsPath()
{
	path tempDir(rootPath->string() + "\\" + statics::thumbnailsFolderName);

	if (is_directory(tempDir))	// Check if thumbnails directory exists.
	{
		cout << "Using thumbnails directory at " << tempDir << endl << endl;
	}
	else
	{
		if (boost::filesystem::create_directory(tempDir))	// Create thumbnails directory
		{
			cout << "Thumbnails folder created at " << tempDir << endl << endl;
		}
		else	// Couldn't create thumbnail directory.
		{
			cout << "Error: Thumbnails folder couldn't be created.";
			exit(1);	// Exit with error.
		}
	}

	statics::thumbnailsPath = new string(tempDir.string());
}

void exporter::generateThumbs()
{
	rootFolder->iterateMatsForThumbs();
}

void exporter::generateTreeOrder()
{
	rootFolder = new folder(*rootPath);

	// Trim folders
	rootFolder->trimSingleMatFolders();
}

/** 
	Initialize string to write.
	Search for current directory for files recursively.
*/
const char* exporter::generate_xml()
{
	xmlToWrite = "<!-- Generated by TexturesXMLExporter, a tool built by Konstantinos Egkarchos (konsnosl@gmail.com) -->\n";
	
	{
		time_t rawtime;
		char buffer[50];

		time(&rawtime);

		strftime(buffer, 50, "%A %d %B %Y %X", localtime(&rawtime));

		xmlToWrite.append("<!-- This xml was exported at ");
		xmlToWrite.append(buffer);
		xmlToWrite.append(" -->\n");
		//delete date;
		xmlToWrite.append("<Texs path=\"" + rootFolder->getPath_Parent() + "\">\n");
	}

	indents = 1;

	xmlToWrite.append(rootFolder->getXMLElement());

	// Check for invalid characters
	cout << "Validating xml..." << endl;
	{
		size_t index = 0;
		
		while (true)
		{
			// Locate the substring to replace.
			index = xmlToWrite.find("&", index);
			if (index == string::npos)
			{
				break;
			}

			// Make the replacement.
			xmlToWrite.replace(index, 1, "&amp;");

			index += 5;
		}
	}

	// Print stats.
	cout << endl;
	cout << std::setfill('-') << std::setw(38) << " " << endl;
	cout << std::setfill(' ');
	printFormatted("| Images", fileImg_count);
	printFormatted("| Diffuse maps", fileDif_count);
	printFormatted("| Bump maps", fileBmp_count);
	printFormatted("| Normal maps", fileNormal_count);
	printFormatted("| Glossiness maps", fileGloss_count);
	printFormatted("| Height maps", fileHeight_count);
	printFormatted("| Specular maps", fileSpec_count);
	printFormatted("| Roughness maps", fileRough_count);
	printFormatted("| Metalness maps", fileMetal_count);
	printFormatted("| Unknown maps", fileUnkn_count);
	printFormatted("| Other files", fileOther_count);
	printFormatted("| Directories", dir_count);
	printFormatted("| Others", other_count);
	printFormatted("| Errors", err_count);
	cout << std::setfill('-') << std::setw(38) << " " << endl;
	cout << std::setfill(' ') << std::setw(0);

	xmlToWrite.append("</Texs>\n");
	return xmlToWrite.c_str();
}

void exporter::printFormatted(char* chars, int count) const
{
	cout << std::setw(26) << std::left << chars << std::right << std::setw(2) << "|" << std::setw(6) << count << std::setw(3) << "|"  << endl;
}

/** Removes all spaces from the string and returns the value. */
string removeSpaces(string str)
{
	str.erase(remove_if(str.begin(), str.end(), isspace));

	return str;
}

exporter::~exporter()
{
	//rootFolder->destroy();
}
